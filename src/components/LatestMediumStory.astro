---
import Container from "../layouts/Container.astro";
import SubTitle from "./SubTitle.astro";

type StoryItem = {
  title: string;
  description: string;
  date: Date;
  link: string;
};

const stripHtml = (html: string) => {
  // Replace paragraph and break tags with newlines first
  let withBreaks = html
    .replace(/<\/p>/gi, "\n\n")
    .replace(/<br\s*\/?>/gi, "\n");
  // Remove other tags
  return withBreaks.replace(/<\/?[^>]+(>|$)/g, "").trim();
};

const fetchStory = async (): Promise<StoryItem> => {
  const res = await fetch(
    "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@paul.pietzko"
  );
  const { items } = await res.json();
  const first = items[0];
  return {
    title: first.title,
    description: first.description,
    date: new Date(first.pubDate),
    link: first.link,
  };
};

const story = await fetchStory();

const paragraphs = stripHtml(story.description)
  .slice(0, 1500)
  .split(/\n\s*\n/)
  .filter(Boolean);
---

<Container size="xl">
  <div class="mb-[10rem] relative" id="story-container">
    <div class="sticky top-0 pt-16 z-10">
      <SubTitle
        title="Latest Story"
        text={`${story.title} â€¢ ${story.date.toLocaleDateString("en-US", {
          month: "short",
          day: "2-digit",
          year: "numeric",
        })}`}
      />
    </div>

    <div
      class="text-xl sm:text-2xl md:text-3xl leading-relaxed text-justify hyphens-auto mt-4 overflow-hidden"
      id="story-wrapper"
    >
      {paragraphs.map((p) => <p>{p.trim()}</p>)}
      {stripHtml(story.description).length > 1500 && <p>...</p>}
    </div>
  </div>
</Container>

<script is:inline>
  const wrapWords = (element) => {
    if (!element) return;
    if (element.querySelector(".word")) return;

    element.querySelectorAll("p").forEach((p) => {
      const words = (p.textContent || "").split(/\s+/);
      p.innerHTML = "";
      words.forEach((word, i) => {
        const span = document.createElement("span");
        span.textContent = word;
        span.className = "word inline-block";
        p.appendChild(span);
        if (i < words.length - 1) p.appendChild(document.createTextNode(" "));
      });
    });
  };

  const initAnimation = () => {
    requestAnimationFrame(() => {
      if (typeof gsap === "undefined" || typeof ScrollTrigger === "undefined")
        return;

      const wrapper = document.getElementById("story-wrapper");
      if (!wrapper) return;

      wrapWords(wrapper);

      const words = gsap.utils.toArray(".word");

      ScrollTrigger.create({
        trigger: "#story-wrapper",
        start: "top bottom",
        end: "bottom top",
        onUpdate: () => {
          const center = window.innerHeight / 2;
          const maxDist = window.innerHeight / 3;

          words.forEach((word) => {
            const rect = word.getBoundingClientRect();
            const wordCenter = rect.top + rect.height / 2;
            const dist = Math.min(Math.abs(wordCenter - center) / maxDist, 1);
            const opacity = Math.exp(-dist * dist * 6);

            gsap.to(word, {
              color: `rgba(255,255,255,${opacity})`,
              duration: 0.1,
              overwrite: true,
            });
          });
        },
      });
    });
  };

  window.addEventListener("load", initAnimation);
  document.addEventListener("astro:after-swap", () =>
    setTimeout(initAnimation, 0)
  );
</script>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"
></script>
