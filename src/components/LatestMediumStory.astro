---
import Container from "../layouts/Container.astro";
import SubTitle from "./SubTitle.astro";

let story: StoryItem = {
  title: "",
  description: "",
  date: new Date(),
  link: "",
};

type StoryItem = {
  title: string;
  description: string;
  date: Date;

  link: string;
};

const fetchStories = async () => {
  const response = await fetch(
    "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@paul.pietzko"
  );
  const data = await response.json();

  story = {
    title: data.items[0].title,
    description: data.items[0].description,
    date: new Date(data.items[0].pubDate),
    link: data.items[0].link,
  };
};

await fetchStories();
---

<Container size="xl">
  <div class="mb-[10rem] relative" id="story-container">
    <div class="sticky top-0 pt-16 z-10">
      <SubTitle
        title="Latest Story"
        text={`${story.title} â€¢ ${story.date.toLocaleDateString("en-US", { month: "short", day: "2-digit", year: "numeric" })}`}
      />
    </div>

    <div
      class="text-xl sm:text-2xl md:text-3xl leading-relaxed text-justify hyphens-auto mt-4 overflow-hidden"
      id="story-wrapper"
    >
      <p id="story-text">
        {
          story.description.length > 1500
            ? story.description.slice(0, 1500) + "..."
            : story.description
        }
      </p>
    </div>
  </div>
</Container>

<script is:inline>
  const initAnimation = () => {
    // Wait for the DOM to be ready
    requestAnimationFrame(() => {
      if (typeof gsap === "undefined" || typeof ScrollTrigger === "undefined")
        return;

      const storyText = document.getElementById("story-text");
      if (!storyText) return;

      // Prevent duplicate spans
      if (storyText.querySelector(".word")) return;

      const textContent = storyText.innerHTML;
      const words = textContent.split(" ");
      storyText.innerHTML = "";

      words.forEach((word, index) => {
        const span = document.createElement("span");
        span.innerHTML = word + (index < words.length - 1 ? " " : "");
        span.className = "word inline-block";
        storyText.appendChild(span);
      });

      const wordElements = gsap.utils.toArray(".word");

      ScrollTrigger.create({
        trigger: "#story-wrapper",
        start: "top bottom",
        end: "bottom top",
        onUpdate: (self) => {
          const viewportCenter = window.innerHeight / 2;

          wordElements.forEach((word) => {
            const rect = word.getBoundingClientRect();
            const wordCenter = rect.top + rect.height / 2;
            const distance = Math.abs(wordCenter - viewportCenter);
            const maxDistance = window.innerHeight / 3;
            const normalizedDistance = Math.min(distance / maxDistance, 1);
            const gaussianValue = Math.exp(-(normalizedDistance ** 2 * 6));

            gsap.to(word, {
              color: `rgba(255, 255, 255, ${gaussianValue})`,
              duration: 0.1,
              overwrite: true,
            });
          });
        },
      });
    });
  };

  // Initial load
  window.addEventListener("load", initAnimation);

  // Astro client-side navigation
  document.addEventListener("astro:after-swap", () => {
    setTimeout(initAnimation, 0); // Slight delay to wait for DOM update
  });
</script>

<!-- Load GSAP -->
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"
></script>
