---
import Container from "../layouts/Container.astro";
import SubTitle from "./SubTitle.astro";

let story: StoryItem = {
  title: "",
  description: "",
  date: new Date(),
  link: "",
};

type StoryItem = {
  title: string;
  description: string;
  date: Date;

  link: string;
};

const fetchStories = async () => {
  const response = await fetch(
    "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@paul.pietzko"
  );
  const data = await response.json();

  story = {
    title: data.items[0].title,
    description: data.items[0].description,
    date: new Date(data.items[0].pubDate),
    link: data.items[0].link,
  };
};

await fetchStories();
---

<Container size="xl">
  <div class="mb-[10rem] relative" id="story-container">
    <div class="sticky top-0 pt-16 z-10">
      <SubTitle
        title="Latest Story"
        text={`${story.title} â€¢ ${story.date.toLocaleDateString("en-US", { month: "short", day: "2-digit", year: "numeric" })}`}
      />
    </div>

    <div
      class="text-xl sm:text-2xl md:text-3xl leading-relaxed text-justify hyphens-auto mt-4 overflow-hidden"
      id="story-wrapper"
    >
      <p id="story-text">
        {story.description.length > 1500
          ? story.description.slice(0, 1500) + "..."
          : story.description}
      </p>
    </div>
  </div>
</Container>

<script is:inline>
  window.addEventListener("load", () => {
    if (typeof gsap !== "undefined") {
      gsap.registerPlugin(ScrollTrigger);

      // Get the text content
      const storyText = document.getElementById("story-text");

      if (storyText) {
        // Split the text content into lines
        const textContent = storyText.innerHTML;
        const words = textContent.split(" ");

        // Clear the original content
        storyText.innerHTML = "";

        // Create spans for each word
        words.forEach((word, index) => {
          const span = document.createElement("span");
          span.innerHTML = word + (index < words.length - 1 ? " " : "");
          span.className = "word inline-block";
          storyText.appendChild(span);
        });

        // Get all word elements
        const wordElements = gsap.utils.toArray(".word");

        // Create a scrolling animation
        ScrollTrigger.create({
          trigger: "#story-wrapper",
          start: "top bottom", // Start when the top of the text hits the bottom of the viewport
          end: "bottom top", // End when the bottom of the text leaves the top of the viewport
          markers: false,
          onUpdate: (self) => {
            // Get the center of the viewport
            const viewportCenter = window.innerHeight / 2;

            // Apply the Gaussian effect to each word
            wordElements.forEach((word) => {
              // Get the word's position
              const rect = word.getBoundingClientRect();
              const wordCenter = rect.top + rect.height / 2;

              // Calculate distance from viewport center (normalized)
              // Wider range - using window.innerHeight / 3 instead of / 4
              const distance = Math.abs(wordCenter - viewportCenter);
              const maxDistance = window.innerHeight / 3;
              const normalizedDistance = Math.min(distance / maxDistance, 1);

              // Less steep Gaussian-like function for more affected lines
              // Reduced multiplier from 12 to 4 for a wider bell curve
              const gaussianValue = Math.exp(
                -(normalizedDistance * normalizedDistance * 6)
              );

              // Apply the color change
              gsap.to(word, {
                color: `rgba(255, 255, 255, ${gaussianValue})`,
                duration: 0.1,
                overwrite: true,
              });
            });
          },
        });
      }
    }
  });
</script>

<!-- Load GSAP -->
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"
></script>
